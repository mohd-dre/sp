{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _s = $RefreshSig$();\nimport React from 'react';\nvar useWindowSize = function useWindowSize() {\n  _s();\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  var _React$useState = React.useState({\n      width: undefined,\n      height: undefined\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    windowSize = _React$useState2[0],\n    setWindowSize = _React$useState2[1];\n  React.useEffect(function () {\n    // only execute all the code below in client side\n    // Handler to call on window resize\n    var handleResize = function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n\n    // Add event listener\n    window.addEventListener('resize', handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    // return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n};\n_s(useWindowSize, \"WMqaMVAPr0u8CJVTsAIdEuYrbbM=\");\nexport default useWindowSize;","map":{"version":3,"names":["React","useWindowSize","_s","_React$useState","useState","width","undefined","height","_React$useState2","_slicedToArray","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener"],"sources":["/Users/mohd/Documents/GitHub/sp/hooks/useWindowSize.js"],"sourcesContent":["import React from 'react';\n\nconst useWindowSize = () => {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = React.useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  React.useEffect(() => {\n    // only execute all the code below in client side\n    // Handler to call on window resize\n    const handleResize = () => {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    // Add event listener\n    window.addEventListener('resize', handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    // return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n};\n\nexport default useWindowSize;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;EAAAC,EAAA;EAC1B;EACA;EACA,IAAAC,eAAA,GAAoCH,KAAK,CAACI,QAAQ,CAAC;MACjDC,KAAK,EAAEC,SAAS;MAChBC,MAAM,EAAED;IACV,CAAC,CAAC;IAAAE,gBAAA,GAAAC,cAAA,CAAAN,eAAA;IAHKO,UAAU,GAAAF,gBAAA;IAAEG,aAAa,GAAAH,gBAAA;EAKhCR,KAAK,CAACY,SAAS,CAAC,YAAM;IACpB;IACA;IACA,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;MACzB;MACAF,aAAa,CAAC;QACZN,KAAK,EAAES,MAAM,CAACC,UAAU;QACxBR,MAAM,EAAEO,MAAM,CAACE;MACjB,CAAC,CAAC;IACJ,CAAC;;IAED;IACAF,MAAM,CAACG,gBAAgB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;;IAE/C;IACAA,YAAY,CAAC,CAAC;;IAEd;IACA;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACR,OAAOH,UAAU;AACnB,CAAC;AAACR,EAAA,CA7BID,aAAa;AA+BnB,eAAeA,aAAa"},"metadata":{},"sourceType":"module"}